// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chlorobot_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chlorobot_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chlorobot_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chlorobot_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chlorobot_5frpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chlorobot_5frpc_2eproto;
class ChlorobotAcknowledgement;
struct ChlorobotAcknowledgementDefaultTypeInternal;
extern ChlorobotAcknowledgementDefaultTypeInternal _ChlorobotAcknowledgement_default_instance_;
class ChlorobotAuthentication;
struct ChlorobotAuthenticationDefaultTypeInternal;
extern ChlorobotAuthenticationDefaultTypeInternal _ChlorobotAuthentication_default_instance_;
class ChlorobotPacket;
struct ChlorobotPacketDefaultTypeInternal;
extern ChlorobotPacketDefaultTypeInternal _ChlorobotPacket_default_instance_;
class ChlorobotRequest;
struct ChlorobotRequestDefaultTypeInternal;
extern ChlorobotRequestDefaultTypeInternal _ChlorobotRequest_default_instance_;
class ChlorobotVersion;
struct ChlorobotVersionDefaultTypeInternal;
extern ChlorobotVersionDefaultTypeInternal _ChlorobotVersion_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChlorobotAcknowledgement* Arena::CreateMaybeMessage<::ChlorobotAcknowledgement>(Arena*);
template<> ::ChlorobotAuthentication* Arena::CreateMaybeMessage<::ChlorobotAuthentication>(Arena*);
template<> ::ChlorobotPacket* Arena::CreateMaybeMessage<::ChlorobotPacket>(Arena*);
template<> ::ChlorobotRequest* Arena::CreateMaybeMessage<::ChlorobotRequest>(Arena*);
template<> ::ChlorobotVersion* Arena::CreateMaybeMessage<::ChlorobotVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ChlorobotCommandEnum : int {
  SEND_NOTHING = 0,
  SEND_VERSION = 1,
  ChlorobotCommandEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChlorobotCommandEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChlorobotCommandEnum_IsValid(int value);
constexpr ChlorobotCommandEnum ChlorobotCommandEnum_MIN = SEND_NOTHING;
constexpr ChlorobotCommandEnum ChlorobotCommandEnum_MAX = SEND_VERSION;
constexpr int ChlorobotCommandEnum_ARRAYSIZE = ChlorobotCommandEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChlorobotCommandEnum_descriptor();
template<typename T>
inline const std::string& ChlorobotCommandEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChlorobotCommandEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChlorobotCommandEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChlorobotCommandEnum_descriptor(), enum_t_value);
}
inline bool ChlorobotCommandEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChlorobotCommandEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChlorobotCommandEnum>(
    ChlorobotCommandEnum_descriptor(), name, value);
}
// ===================================================================

class ChlorobotPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChlorobotPacket) */ {
 public:
  inline ChlorobotPacket() : ChlorobotPacket(nullptr) {}
  ~ChlorobotPacket() override;
  explicit PROTOBUF_CONSTEXPR ChlorobotPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChlorobotPacket(const ChlorobotPacket& from);
  ChlorobotPacket(ChlorobotPacket&& from) noexcept
    : ChlorobotPacket() {
    *this = ::std::move(from);
  }

  inline ChlorobotPacket& operator=(const ChlorobotPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChlorobotPacket& operator=(ChlorobotPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChlorobotPacket& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kNonNumeric = 7,
    kNonNumeric0 = 2,
    kNumeric = 3,
    COMMAND_NOT_SET = 0,
  };

  static inline const ChlorobotPacket* internal_default_instance() {
    return reinterpret_cast<const ChlorobotPacket*>(
               &_ChlorobotPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChlorobotPacket& a, ChlorobotPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ChlorobotPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChlorobotPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChlorobotPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChlorobotPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChlorobotPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChlorobotPacket& from) {
    ChlorobotPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChlorobotPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChlorobotPacket";
  }
  protected:
  explicit ChlorobotPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameters0FieldNumber = 4,
    kParametersFieldNumber = 8,
    kPrefix0FieldNumber = 1,
    kTrailingParameter0FieldNumber = 5,
    kPrefixFieldNumber = 6,
    kTrailingParameterFieldNumber = 9,
    kNonNumericFieldNumber = 7,
    kNonNumeric0FieldNumber = 2,
    kNumericFieldNumber = 3,
  };
  // repeated string parameters_0 = 4;
  int parameters_0_size() const;
  private:
  int _internal_parameters_0_size() const;
  public:
  void clear_parameters_0();
  const std::string& parameters_0(int index) const;
  std::string* mutable_parameters_0(int index);
  void set_parameters_0(int index, const std::string& value);
  void set_parameters_0(int index, std::string&& value);
  void set_parameters_0(int index, const char* value);
  void set_parameters_0(int index, const char* value, size_t size);
  std::string* add_parameters_0();
  void add_parameters_0(const std::string& value);
  void add_parameters_0(std::string&& value);
  void add_parameters_0(const char* value);
  void add_parameters_0(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parameters_0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parameters_0();
  private:
  const std::string& _internal_parameters_0(int index) const;
  std::string* _internal_add_parameters_0();
  public:

  // repeated bytes parameters = 8;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  const std::string& parameters(int index) const;
  std::string* mutable_parameters(int index);
  void set_parameters(int index, const std::string& value);
  void set_parameters(int index, std::string&& value);
  void set_parameters(int index, const char* value);
  void set_parameters(int index, const void* value, size_t size);
  std::string* add_parameters();
  void add_parameters(const std::string& value);
  void add_parameters(std::string&& value);
  void add_parameters(const char* value);
  void add_parameters(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parameters();
  private:
  const std::string& _internal_parameters(int index) const;
  std::string* _internal_add_parameters();
  public:

  // optional string prefix_0 = 1;
  bool has_prefix_0() const;
  private:
  bool _internal_has_prefix_0() const;
  public:
  void clear_prefix_0();
  const std::string& prefix_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix_0();
  PROTOBUF_NODISCARD std::string* release_prefix_0();
  void set_allocated_prefix_0(std::string* prefix_0);
  private:
  const std::string& _internal_prefix_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix_0(const std::string& value);
  std::string* _internal_mutable_prefix_0();
  public:

  // optional string trailing_parameter_0 = 5;
  bool has_trailing_parameter_0() const;
  private:
  bool _internal_has_trailing_parameter_0() const;
  public:
  void clear_trailing_parameter_0();
  const std::string& trailing_parameter_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trailing_parameter_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trailing_parameter_0();
  PROTOBUF_NODISCARD std::string* release_trailing_parameter_0();
  void set_allocated_trailing_parameter_0(std::string* trailing_parameter_0);
  private:
  const std::string& _internal_trailing_parameter_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trailing_parameter_0(const std::string& value);
  std::string* _internal_mutable_trailing_parameter_0();
  public:

  // optional bytes prefix = 6;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional bytes trailing_parameter = 9;
  bool has_trailing_parameter() const;
  private:
  bool _internal_has_trailing_parameter() const;
  public:
  void clear_trailing_parameter();
  const std::string& trailing_parameter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trailing_parameter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trailing_parameter();
  PROTOBUF_NODISCARD std::string* release_trailing_parameter();
  void set_allocated_trailing_parameter(std::string* trailing_parameter);
  private:
  const std::string& _internal_trailing_parameter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trailing_parameter(const std::string& value);
  std::string* _internal_mutable_trailing_parameter();
  public:

  // bytes non_numeric = 7;
  bool has_non_numeric() const;
  private:
  bool _internal_has_non_numeric() const;
  public:
  void clear_non_numeric();
  const std::string& non_numeric() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_non_numeric(ArgT0&& arg0, ArgT... args);
  std::string* mutable_non_numeric();
  PROTOBUF_NODISCARD std::string* release_non_numeric();
  void set_allocated_non_numeric(std::string* non_numeric);
  private:
  const std::string& _internal_non_numeric() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_non_numeric(const std::string& value);
  std::string* _internal_mutable_non_numeric();
  public:

  // string non_numeric_0 = 2;
  bool has_non_numeric_0() const;
  private:
  bool _internal_has_non_numeric_0() const;
  public:
  void clear_non_numeric_0();
  const std::string& non_numeric_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_non_numeric_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_non_numeric_0();
  PROTOBUF_NODISCARD std::string* release_non_numeric_0();
  void set_allocated_non_numeric_0(std::string* non_numeric_0);
  private:
  const std::string& _internal_non_numeric_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_non_numeric_0(const std::string& value);
  std::string* _internal_mutable_non_numeric_0();
  public:

  // uint32 numeric = 3;
  bool has_numeric() const;
  private:
  bool _internal_has_numeric() const;
  public:
  void clear_numeric();
  uint32_t numeric() const;
  void set_numeric(uint32_t value);
  private:
  uint32_t _internal_numeric() const;
  void _internal_set_numeric(uint32_t value);
  public:

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:ChlorobotPacket)
 private:
  class _Internal;
  void set_has_non_numeric();
  void set_has_non_numeric_0();
  void set_has_numeric();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parameters_0_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trailing_parameter_0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trailing_parameter_;
    union CommandUnion {
      constexpr CommandUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr non_numeric_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr non_numeric_0_;
      uint32_t numeric_;
    } command_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chlorobot_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ChlorobotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChlorobotRequest) */ {
 public:
  inline ChlorobotRequest() : ChlorobotRequest(nullptr) {}
  ~ChlorobotRequest() override;
  explicit PROTOBUF_CONSTEXPR ChlorobotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChlorobotRequest(const ChlorobotRequest& from);
  ChlorobotRequest(ChlorobotRequest&& from) noexcept
    : ChlorobotRequest() {
    *this = ::std::move(from);
  }

  inline ChlorobotRequest& operator=(const ChlorobotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChlorobotRequest& operator=(ChlorobotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChlorobotRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPacket = 2,
    kCommandType = 3,
    DATA_NOT_SET = 0,
  };

  static inline const ChlorobotRequest* internal_default_instance() {
    return reinterpret_cast<const ChlorobotRequest*>(
               &_ChlorobotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChlorobotRequest& a, ChlorobotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChlorobotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChlorobotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChlorobotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChlorobotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChlorobotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChlorobotRequest& from) {
    ChlorobotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChlorobotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChlorobotRequest";
  }
  protected:
  explicit ChlorobotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
    kPacketFieldNumber = 2,
    kCommandTypeFieldNumber = 3,
  };
  // .ChlorobotAuthentication auth = 1;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const ::ChlorobotAuthentication& auth() const;
  PROTOBUF_NODISCARD ::ChlorobotAuthentication* release_auth();
  ::ChlorobotAuthentication* mutable_auth();
  void set_allocated_auth(::ChlorobotAuthentication* auth);
  private:
  const ::ChlorobotAuthentication& _internal_auth() const;
  ::ChlorobotAuthentication* _internal_mutable_auth();
  public:
  void unsafe_arena_set_allocated_auth(
      ::ChlorobotAuthentication* auth);
  ::ChlorobotAuthentication* unsafe_arena_release_auth();

  // .ChlorobotPacket packet = 2;
  bool has_packet() const;
  private:
  bool _internal_has_packet() const;
  public:
  void clear_packet();
  const ::ChlorobotPacket& packet() const;
  PROTOBUF_NODISCARD ::ChlorobotPacket* release_packet();
  ::ChlorobotPacket* mutable_packet();
  void set_allocated_packet(::ChlorobotPacket* packet);
  private:
  const ::ChlorobotPacket& _internal_packet() const;
  ::ChlorobotPacket* _internal_mutable_packet();
  public:
  void unsafe_arena_set_allocated_packet(
      ::ChlorobotPacket* packet);
  ::ChlorobotPacket* unsafe_arena_release_packet();

  // .ChlorobotCommandEnum command_type = 3;
  bool has_command_type() const;
  private:
  bool _internal_has_command_type() const;
  public:
  void clear_command_type();
  ::ChlorobotCommandEnum command_type() const;
  void set_command_type(::ChlorobotCommandEnum value);
  private:
  ::ChlorobotCommandEnum _internal_command_type() const;
  void _internal_set_command_type(::ChlorobotCommandEnum value);
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:ChlorobotRequest)
 private:
  class _Internal;
  void set_has_packet();
  void set_has_command_type();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ChlorobotAuthentication* auth_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::ChlorobotPacket* packet_;
      int command_type_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chlorobot_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ChlorobotAuthentication final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChlorobotAuthentication) */ {
 public:
  inline ChlorobotAuthentication() : ChlorobotAuthentication(nullptr) {}
  ~ChlorobotAuthentication() override;
  explicit PROTOBUF_CONSTEXPR ChlorobotAuthentication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChlorobotAuthentication(const ChlorobotAuthentication& from);
  ChlorobotAuthentication(ChlorobotAuthentication&& from) noexcept
    : ChlorobotAuthentication() {
    *this = ::std::move(from);
  }

  inline ChlorobotAuthentication& operator=(const ChlorobotAuthentication& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChlorobotAuthentication& operator=(ChlorobotAuthentication&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChlorobotAuthentication& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChlorobotAuthentication* internal_default_instance() {
    return reinterpret_cast<const ChlorobotAuthentication*>(
               &_ChlorobotAuthentication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChlorobotAuthentication& a, ChlorobotAuthentication& b) {
    a.Swap(&b);
  }
  inline void Swap(ChlorobotAuthentication* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChlorobotAuthentication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChlorobotAuthentication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChlorobotAuthentication>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChlorobotAuthentication& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChlorobotAuthentication& from) {
    ChlorobotAuthentication::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChlorobotAuthentication* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChlorobotAuthentication";
  }
  protected:
  explicit ChlorobotAuthentication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // optional string token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional uint32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChlorobotAuthentication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chlorobot_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ChlorobotVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChlorobotVersion) */ {
 public:
  inline ChlorobotVersion() : ChlorobotVersion(nullptr) {}
  ~ChlorobotVersion() override;
  explicit PROTOBUF_CONSTEXPR ChlorobotVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChlorobotVersion(const ChlorobotVersion& from);
  ChlorobotVersion(ChlorobotVersion&& from) noexcept
    : ChlorobotVersion() {
    *this = ::std::move(from);
  }

  inline ChlorobotVersion& operator=(const ChlorobotVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChlorobotVersion& operator=(ChlorobotVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChlorobotVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChlorobotVersion* internal_default_instance() {
    return reinterpret_cast<const ChlorobotVersion*>(
               &_ChlorobotVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChlorobotVersion& a, ChlorobotVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ChlorobotVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChlorobotVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChlorobotVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChlorobotVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChlorobotVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChlorobotVersion& from) {
    ChlorobotVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChlorobotVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChlorobotVersion";
  }
  protected:
  explicit ChlorobotVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrettyFieldNumber = 4,
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // string pretty = 4;
  void clear_pretty();
  const std::string& pretty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pretty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pretty();
  PROTOBUF_NODISCARD std::string* release_pretty();
  void set_allocated_pretty(std::string* pretty);
  private:
  const std::string& _internal_pretty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pretty(const std::string& value);
  std::string* _internal_mutable_pretty();
  public:

  // uint32 major = 1;
  void clear_major();
  uint32_t major() const;
  void set_major(uint32_t value);
  private:
  uint32_t _internal_major() const;
  void _internal_set_major(uint32_t value);
  public:

  // uint32 minor = 2;
  void clear_minor();
  uint32_t minor() const;
  void set_minor(uint32_t value);
  private:
  uint32_t _internal_minor() const;
  void _internal_set_minor(uint32_t value);
  public:

  // uint32 patch = 3;
  void clear_patch();
  uint32_t patch() const;
  void set_patch(uint32_t value);
  private:
  uint32_t _internal_patch() const;
  void _internal_set_patch(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChlorobotVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretty_;
    uint32_t major_;
    uint32_t minor_;
    uint32_t patch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chlorobot_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ChlorobotAcknowledgement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChlorobotAcknowledgement) */ {
 public:
  inline ChlorobotAcknowledgement() : ChlorobotAcknowledgement(nullptr) {}
  ~ChlorobotAcknowledgement() override;
  explicit PROTOBUF_CONSTEXPR ChlorobotAcknowledgement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChlorobotAcknowledgement(const ChlorobotAcknowledgement& from);
  ChlorobotAcknowledgement(ChlorobotAcknowledgement&& from) noexcept
    : ChlorobotAcknowledgement() {
    *this = ::std::move(from);
  }

  inline ChlorobotAcknowledgement& operator=(const ChlorobotAcknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChlorobotAcknowledgement& operator=(ChlorobotAcknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChlorobotAcknowledgement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChlorobotAcknowledgement* internal_default_instance() {
    return reinterpret_cast<const ChlorobotAcknowledgement*>(
               &_ChlorobotAcknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChlorobotAcknowledgement& a, ChlorobotAcknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(ChlorobotAcknowledgement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChlorobotAcknowledgement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChlorobotAcknowledgement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChlorobotAcknowledgement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChlorobotAcknowledgement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChlorobotAcknowledgement& from) {
    ChlorobotAcknowledgement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChlorobotAcknowledgement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChlorobotAcknowledgement";
  }
  protected:
  explicit ChlorobotAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // optional .ChlorobotVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::ChlorobotVersion& version() const;
  PROTOBUF_NODISCARD ::ChlorobotVersion* release_version();
  ::ChlorobotVersion* mutable_version();
  void set_allocated_version(::ChlorobotVersion* version);
  private:
  const ::ChlorobotVersion& _internal_version() const;
  ::ChlorobotVersion* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::ChlorobotVersion* version);
  ::ChlorobotVersion* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:ChlorobotAcknowledgement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ChlorobotVersion* version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chlorobot_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChlorobotPacket

// optional string prefix_0 = 1;
inline bool ChlorobotPacket::_internal_has_prefix_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChlorobotPacket::has_prefix_0() const {
  return _internal_has_prefix_0();
}
inline void ChlorobotPacket::clear_prefix_0() {
  _impl_.prefix_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChlorobotPacket::prefix_0() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.prefix_0)
  return _internal_prefix_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChlorobotPacket::set_prefix_0(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.prefix_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotPacket.prefix_0)
}
inline std::string* ChlorobotPacket::mutable_prefix_0() {
  std::string* _s = _internal_mutable_prefix_0();
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.prefix_0)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_prefix_0() const {
  return _impl_.prefix_0_.Get();
}
inline void ChlorobotPacket::_internal_set_prefix_0(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prefix_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::_internal_mutable_prefix_0() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.prefix_0_.Mutable(GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::release_prefix_0() {
  // @@protoc_insertion_point(field_release:ChlorobotPacket.prefix_0)
  if (!_internal_has_prefix_0()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.prefix_0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_0_.IsDefault()) {
    _impl_.prefix_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChlorobotPacket::set_allocated_prefix_0(std::string* prefix_0) {
  if (prefix_0 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prefix_0_.SetAllocated(prefix_0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_0_.IsDefault()) {
    _impl_.prefix_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChlorobotPacket.prefix_0)
}

// optional bytes prefix = 6;
inline bool ChlorobotPacket::_internal_has_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChlorobotPacket::has_prefix() const {
  return _internal_has_prefix();
}
inline void ChlorobotPacket::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChlorobotPacket::prefix() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChlorobotPacket::set_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.prefix_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotPacket.prefix)
}
inline std::string* ChlorobotPacket::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.prefix)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void ChlorobotPacket::_internal_set_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::_internal_mutable_prefix() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::release_prefix() {
  // @@protoc_insertion_point(field_release:ChlorobotPacket.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChlorobotPacket::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.prefix_.SetAllocated(prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChlorobotPacket.prefix)
}

// bytes non_numeric = 7;
inline bool ChlorobotPacket::_internal_has_non_numeric() const {
  return command_case() == kNonNumeric;
}
inline bool ChlorobotPacket::has_non_numeric() const {
  return _internal_has_non_numeric();
}
inline void ChlorobotPacket::set_has_non_numeric() {
  _impl_._oneof_case_[0] = kNonNumeric;
}
inline void ChlorobotPacket::clear_non_numeric() {
  if (_internal_has_non_numeric()) {
    _impl_.command_.non_numeric_.Destroy();
    clear_has_command();
  }
}
inline const std::string& ChlorobotPacket::non_numeric() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.non_numeric)
  return _internal_non_numeric();
}
template <typename ArgT0, typename... ArgT>
inline void ChlorobotPacket::set_non_numeric(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_non_numeric()) {
    clear_command();
    set_has_non_numeric();
    _impl_.command_.non_numeric_.InitDefault();
  }
  _impl_.command_.non_numeric_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotPacket.non_numeric)
}
inline std::string* ChlorobotPacket::mutable_non_numeric() {
  std::string* _s = _internal_mutable_non_numeric();
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.non_numeric)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_non_numeric() const {
  if (_internal_has_non_numeric()) {
    return _impl_.command_.non_numeric_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChlorobotPacket::_internal_set_non_numeric(const std::string& value) {
  if (!_internal_has_non_numeric()) {
    clear_command();
    set_has_non_numeric();
    _impl_.command_.non_numeric_.InitDefault();
  }
  _impl_.command_.non_numeric_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::_internal_mutable_non_numeric() {
  if (!_internal_has_non_numeric()) {
    clear_command();
    set_has_non_numeric();
    _impl_.command_.non_numeric_.InitDefault();
  }
  return _impl_.command_.non_numeric_.Mutable(      GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::release_non_numeric() {
  // @@protoc_insertion_point(field_release:ChlorobotPacket.non_numeric)
  if (_internal_has_non_numeric()) {
    clear_has_command();
    return _impl_.command_.non_numeric_.Release();
  } else {
    return nullptr;
  }
}
inline void ChlorobotPacket::set_allocated_non_numeric(std::string* non_numeric) {
  if (has_command()) {
    clear_command();
  }
  if (non_numeric != nullptr) {
    set_has_non_numeric();
    _impl_.command_.non_numeric_.InitAllocated(non_numeric, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:ChlorobotPacket.non_numeric)
}

// string non_numeric_0 = 2;
inline bool ChlorobotPacket::_internal_has_non_numeric_0() const {
  return command_case() == kNonNumeric0;
}
inline bool ChlorobotPacket::has_non_numeric_0() const {
  return _internal_has_non_numeric_0();
}
inline void ChlorobotPacket::set_has_non_numeric_0() {
  _impl_._oneof_case_[0] = kNonNumeric0;
}
inline void ChlorobotPacket::clear_non_numeric_0() {
  if (_internal_has_non_numeric_0()) {
    _impl_.command_.non_numeric_0_.Destroy();
    clear_has_command();
  }
}
inline const std::string& ChlorobotPacket::non_numeric_0() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.non_numeric_0)
  return _internal_non_numeric_0();
}
template <typename ArgT0, typename... ArgT>
inline void ChlorobotPacket::set_non_numeric_0(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_non_numeric_0()) {
    clear_command();
    set_has_non_numeric_0();
    _impl_.command_.non_numeric_0_.InitDefault();
  }
  _impl_.command_.non_numeric_0_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotPacket.non_numeric_0)
}
inline std::string* ChlorobotPacket::mutable_non_numeric_0() {
  std::string* _s = _internal_mutable_non_numeric_0();
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.non_numeric_0)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_non_numeric_0() const {
  if (_internal_has_non_numeric_0()) {
    return _impl_.command_.non_numeric_0_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChlorobotPacket::_internal_set_non_numeric_0(const std::string& value) {
  if (!_internal_has_non_numeric_0()) {
    clear_command();
    set_has_non_numeric_0();
    _impl_.command_.non_numeric_0_.InitDefault();
  }
  _impl_.command_.non_numeric_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::_internal_mutable_non_numeric_0() {
  if (!_internal_has_non_numeric_0()) {
    clear_command();
    set_has_non_numeric_0();
    _impl_.command_.non_numeric_0_.InitDefault();
  }
  return _impl_.command_.non_numeric_0_.Mutable(      GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::release_non_numeric_0() {
  // @@protoc_insertion_point(field_release:ChlorobotPacket.non_numeric_0)
  if (_internal_has_non_numeric_0()) {
    clear_has_command();
    return _impl_.command_.non_numeric_0_.Release();
  } else {
    return nullptr;
  }
}
inline void ChlorobotPacket::set_allocated_non_numeric_0(std::string* non_numeric_0) {
  if (has_command()) {
    clear_command();
  }
  if (non_numeric_0 != nullptr) {
    set_has_non_numeric_0();
    _impl_.command_.non_numeric_0_.InitAllocated(non_numeric_0, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:ChlorobotPacket.non_numeric_0)
}

// uint32 numeric = 3;
inline bool ChlorobotPacket::_internal_has_numeric() const {
  return command_case() == kNumeric;
}
inline bool ChlorobotPacket::has_numeric() const {
  return _internal_has_numeric();
}
inline void ChlorobotPacket::set_has_numeric() {
  _impl_._oneof_case_[0] = kNumeric;
}
inline void ChlorobotPacket::clear_numeric() {
  if (_internal_has_numeric()) {
    _impl_.command_.numeric_ = 0u;
    clear_has_command();
  }
}
inline uint32_t ChlorobotPacket::_internal_numeric() const {
  if (_internal_has_numeric()) {
    return _impl_.command_.numeric_;
  }
  return 0u;
}
inline void ChlorobotPacket::_internal_set_numeric(uint32_t value) {
  if (!_internal_has_numeric()) {
    clear_command();
    set_has_numeric();
  }
  _impl_.command_.numeric_ = value;
}
inline uint32_t ChlorobotPacket::numeric() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.numeric)
  return _internal_numeric();
}
inline void ChlorobotPacket::set_numeric(uint32_t value) {
  _internal_set_numeric(value);
  // @@protoc_insertion_point(field_set:ChlorobotPacket.numeric)
}

// repeated bytes parameters = 8;
inline int ChlorobotPacket::_internal_parameters_size() const {
  return _impl_.parameters_.size();
}
inline int ChlorobotPacket::parameters_size() const {
  return _internal_parameters_size();
}
inline void ChlorobotPacket::clear_parameters() {
  _impl_.parameters_.Clear();
}
inline std::string* ChlorobotPacket::add_parameters() {
  std::string* _s = _internal_add_parameters();
  // @@protoc_insertion_point(field_add_mutable:ChlorobotPacket.parameters)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_parameters(int index) const {
  return _impl_.parameters_.Get(index);
}
inline const std::string& ChlorobotPacket::parameters(int index) const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.parameters)
  return _internal_parameters(index);
}
inline std::string* ChlorobotPacket::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.parameters)
  return _impl_.parameters_.Mutable(index);
}
inline void ChlorobotPacket::set_parameters(int index, const std::string& value) {
  _impl_.parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ChlorobotPacket.parameters)
}
inline void ChlorobotPacket::set_parameters(int index, std::string&& value) {
  _impl_.parameters_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ChlorobotPacket.parameters)
}
inline void ChlorobotPacket::set_parameters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChlorobotPacket.parameters)
}
inline void ChlorobotPacket::set_parameters(int index, const void* value, size_t size) {
  _impl_.parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChlorobotPacket.parameters)
}
inline std::string* ChlorobotPacket::_internal_add_parameters() {
  return _impl_.parameters_.Add();
}
inline void ChlorobotPacket::add_parameters(const std::string& value) {
  _impl_.parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChlorobotPacket.parameters)
}
inline void ChlorobotPacket::add_parameters(std::string&& value) {
  _impl_.parameters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChlorobotPacket.parameters)
}
inline void ChlorobotPacket::add_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChlorobotPacket.parameters)
}
inline void ChlorobotPacket::add_parameters(const void* value, size_t size) {
  _impl_.parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChlorobotPacket.parameters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChlorobotPacket::parameters() const {
  // @@protoc_insertion_point(field_list:ChlorobotPacket.parameters)
  return _impl_.parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChlorobotPacket::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:ChlorobotPacket.parameters)
  return &_impl_.parameters_;
}

// repeated string parameters_0 = 4;
inline int ChlorobotPacket::_internal_parameters_0_size() const {
  return _impl_.parameters_0_.size();
}
inline int ChlorobotPacket::parameters_0_size() const {
  return _internal_parameters_0_size();
}
inline void ChlorobotPacket::clear_parameters_0() {
  _impl_.parameters_0_.Clear();
}
inline std::string* ChlorobotPacket::add_parameters_0() {
  std::string* _s = _internal_add_parameters_0();
  // @@protoc_insertion_point(field_add_mutable:ChlorobotPacket.parameters_0)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_parameters_0(int index) const {
  return _impl_.parameters_0_.Get(index);
}
inline const std::string& ChlorobotPacket::parameters_0(int index) const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.parameters_0)
  return _internal_parameters_0(index);
}
inline std::string* ChlorobotPacket::mutable_parameters_0(int index) {
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.parameters_0)
  return _impl_.parameters_0_.Mutable(index);
}
inline void ChlorobotPacket::set_parameters_0(int index, const std::string& value) {
  _impl_.parameters_0_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ChlorobotPacket.parameters_0)
}
inline void ChlorobotPacket::set_parameters_0(int index, std::string&& value) {
  _impl_.parameters_0_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ChlorobotPacket.parameters_0)
}
inline void ChlorobotPacket::set_parameters_0(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameters_0_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChlorobotPacket.parameters_0)
}
inline void ChlorobotPacket::set_parameters_0(int index, const char* value, size_t size) {
  _impl_.parameters_0_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChlorobotPacket.parameters_0)
}
inline std::string* ChlorobotPacket::_internal_add_parameters_0() {
  return _impl_.parameters_0_.Add();
}
inline void ChlorobotPacket::add_parameters_0(const std::string& value) {
  _impl_.parameters_0_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChlorobotPacket.parameters_0)
}
inline void ChlorobotPacket::add_parameters_0(std::string&& value) {
  _impl_.parameters_0_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChlorobotPacket.parameters_0)
}
inline void ChlorobotPacket::add_parameters_0(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameters_0_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChlorobotPacket.parameters_0)
}
inline void ChlorobotPacket::add_parameters_0(const char* value, size_t size) {
  _impl_.parameters_0_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChlorobotPacket.parameters_0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChlorobotPacket::parameters_0() const {
  // @@protoc_insertion_point(field_list:ChlorobotPacket.parameters_0)
  return _impl_.parameters_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChlorobotPacket::mutable_parameters_0() {
  // @@protoc_insertion_point(field_mutable_list:ChlorobotPacket.parameters_0)
  return &_impl_.parameters_0_;
}

// optional bytes trailing_parameter = 9;
inline bool ChlorobotPacket::_internal_has_trailing_parameter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChlorobotPacket::has_trailing_parameter() const {
  return _internal_has_trailing_parameter();
}
inline void ChlorobotPacket::clear_trailing_parameter() {
  _impl_.trailing_parameter_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChlorobotPacket::trailing_parameter() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.trailing_parameter)
  return _internal_trailing_parameter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChlorobotPacket::set_trailing_parameter(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.trailing_parameter_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotPacket.trailing_parameter)
}
inline std::string* ChlorobotPacket::mutable_trailing_parameter() {
  std::string* _s = _internal_mutable_trailing_parameter();
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.trailing_parameter)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_trailing_parameter() const {
  return _impl_.trailing_parameter_.Get();
}
inline void ChlorobotPacket::_internal_set_trailing_parameter(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.trailing_parameter_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::_internal_mutable_trailing_parameter() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.trailing_parameter_.Mutable(GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::release_trailing_parameter() {
  // @@protoc_insertion_point(field_release:ChlorobotPacket.trailing_parameter)
  if (!_internal_has_trailing_parameter()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.trailing_parameter_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trailing_parameter_.IsDefault()) {
    _impl_.trailing_parameter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChlorobotPacket::set_allocated_trailing_parameter(std::string* trailing_parameter) {
  if (trailing_parameter != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.trailing_parameter_.SetAllocated(trailing_parameter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trailing_parameter_.IsDefault()) {
    _impl_.trailing_parameter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChlorobotPacket.trailing_parameter)
}

// optional string trailing_parameter_0 = 5;
inline bool ChlorobotPacket::_internal_has_trailing_parameter_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChlorobotPacket::has_trailing_parameter_0() const {
  return _internal_has_trailing_parameter_0();
}
inline void ChlorobotPacket::clear_trailing_parameter_0() {
  _impl_.trailing_parameter_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChlorobotPacket::trailing_parameter_0() const {
  // @@protoc_insertion_point(field_get:ChlorobotPacket.trailing_parameter_0)
  return _internal_trailing_parameter_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChlorobotPacket::set_trailing_parameter_0(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.trailing_parameter_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotPacket.trailing_parameter_0)
}
inline std::string* ChlorobotPacket::mutable_trailing_parameter_0() {
  std::string* _s = _internal_mutable_trailing_parameter_0();
  // @@protoc_insertion_point(field_mutable:ChlorobotPacket.trailing_parameter_0)
  return _s;
}
inline const std::string& ChlorobotPacket::_internal_trailing_parameter_0() const {
  return _impl_.trailing_parameter_0_.Get();
}
inline void ChlorobotPacket::_internal_set_trailing_parameter_0(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.trailing_parameter_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::_internal_mutable_trailing_parameter_0() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.trailing_parameter_0_.Mutable(GetArenaForAllocation());
}
inline std::string* ChlorobotPacket::release_trailing_parameter_0() {
  // @@protoc_insertion_point(field_release:ChlorobotPacket.trailing_parameter_0)
  if (!_internal_has_trailing_parameter_0()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.trailing_parameter_0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trailing_parameter_0_.IsDefault()) {
    _impl_.trailing_parameter_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChlorobotPacket::set_allocated_trailing_parameter_0(std::string* trailing_parameter_0) {
  if (trailing_parameter_0 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trailing_parameter_0_.SetAllocated(trailing_parameter_0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trailing_parameter_0_.IsDefault()) {
    _impl_.trailing_parameter_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChlorobotPacket.trailing_parameter_0)
}

inline bool ChlorobotPacket::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void ChlorobotPacket::clear_has_command() {
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}
inline ChlorobotPacket::CommandCase ChlorobotPacket::command_case() const {
  return ChlorobotPacket::CommandCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChlorobotRequest

// .ChlorobotAuthentication auth = 1;
inline bool ChlorobotRequest::_internal_has_auth() const {
  return this != internal_default_instance() && _impl_.auth_ != nullptr;
}
inline bool ChlorobotRequest::has_auth() const {
  return _internal_has_auth();
}
inline void ChlorobotRequest::clear_auth() {
  if (GetArenaForAllocation() == nullptr && _impl_.auth_ != nullptr) {
    delete _impl_.auth_;
  }
  _impl_.auth_ = nullptr;
}
inline const ::ChlorobotAuthentication& ChlorobotRequest::_internal_auth() const {
  const ::ChlorobotAuthentication* p = _impl_.auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChlorobotAuthentication&>(
      ::_ChlorobotAuthentication_default_instance_);
}
inline const ::ChlorobotAuthentication& ChlorobotRequest::auth() const {
  // @@protoc_insertion_point(field_get:ChlorobotRequest.auth)
  return _internal_auth();
}
inline void ChlorobotRequest::unsafe_arena_set_allocated_auth(
    ::ChlorobotAuthentication* auth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auth_);
  }
  _impl_.auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChlorobotRequest.auth)
}
inline ::ChlorobotAuthentication* ChlorobotRequest::release_auth() {
  
  ::ChlorobotAuthentication* temp = _impl_.auth_;
  _impl_.auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChlorobotAuthentication* ChlorobotRequest::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:ChlorobotRequest.auth)
  
  ::ChlorobotAuthentication* temp = _impl_.auth_;
  _impl_.auth_ = nullptr;
  return temp;
}
inline ::ChlorobotAuthentication* ChlorobotRequest::_internal_mutable_auth() {
  
  if (_impl_.auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChlorobotAuthentication>(GetArenaForAllocation());
    _impl_.auth_ = p;
  }
  return _impl_.auth_;
}
inline ::ChlorobotAuthentication* ChlorobotRequest::mutable_auth() {
  ::ChlorobotAuthentication* _msg = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:ChlorobotRequest.auth)
  return _msg;
}
inline void ChlorobotRequest::set_allocated_auth(::ChlorobotAuthentication* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:ChlorobotRequest.auth)
}

// .ChlorobotPacket packet = 2;
inline bool ChlorobotRequest::_internal_has_packet() const {
  return data_case() == kPacket;
}
inline bool ChlorobotRequest::has_packet() const {
  return _internal_has_packet();
}
inline void ChlorobotRequest::set_has_packet() {
  _impl_._oneof_case_[0] = kPacket;
}
inline void ChlorobotRequest::clear_packet() {
  if (_internal_has_packet()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.packet_;
    }
    clear_has_data();
  }
}
inline ::ChlorobotPacket* ChlorobotRequest::release_packet() {
  // @@protoc_insertion_point(field_release:ChlorobotRequest.packet)
  if (_internal_has_packet()) {
    clear_has_data();
    ::ChlorobotPacket* temp = _impl_.data_.packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.data_.packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ChlorobotPacket& ChlorobotRequest::_internal_packet() const {
  return _internal_has_packet()
      ? *_impl_.data_.packet_
      : reinterpret_cast< ::ChlorobotPacket&>(::_ChlorobotPacket_default_instance_);
}
inline const ::ChlorobotPacket& ChlorobotRequest::packet() const {
  // @@protoc_insertion_point(field_get:ChlorobotRequest.packet)
  return _internal_packet();
}
inline ::ChlorobotPacket* ChlorobotRequest::unsafe_arena_release_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ChlorobotRequest.packet)
  if (_internal_has_packet()) {
    clear_has_data();
    ::ChlorobotPacket* temp = _impl_.data_.packet_;
    _impl_.data_.packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChlorobotRequest::unsafe_arena_set_allocated_packet(::ChlorobotPacket* packet) {
  clear_data();
  if (packet) {
    set_has_packet();
    _impl_.data_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChlorobotRequest.packet)
}
inline ::ChlorobotPacket* ChlorobotRequest::_internal_mutable_packet() {
  if (!_internal_has_packet()) {
    clear_data();
    set_has_packet();
    _impl_.data_.packet_ = CreateMaybeMessage< ::ChlorobotPacket >(GetArenaForAllocation());
  }
  return _impl_.data_.packet_;
}
inline ::ChlorobotPacket* ChlorobotRequest::mutable_packet() {
  ::ChlorobotPacket* _msg = _internal_mutable_packet();
  // @@protoc_insertion_point(field_mutable:ChlorobotRequest.packet)
  return _msg;
}

// .ChlorobotCommandEnum command_type = 3;
inline bool ChlorobotRequest::_internal_has_command_type() const {
  return data_case() == kCommandType;
}
inline bool ChlorobotRequest::has_command_type() const {
  return _internal_has_command_type();
}
inline void ChlorobotRequest::set_has_command_type() {
  _impl_._oneof_case_[0] = kCommandType;
}
inline void ChlorobotRequest::clear_command_type() {
  if (_internal_has_command_type()) {
    _impl_.data_.command_type_ = 0;
    clear_has_data();
  }
}
inline ::ChlorobotCommandEnum ChlorobotRequest::_internal_command_type() const {
  if (_internal_has_command_type()) {
    return static_cast< ::ChlorobotCommandEnum >(_impl_.data_.command_type_);
  }
  return static_cast< ::ChlorobotCommandEnum >(0);
}
inline ::ChlorobotCommandEnum ChlorobotRequest::command_type() const {
  // @@protoc_insertion_point(field_get:ChlorobotRequest.command_type)
  return _internal_command_type();
}
inline void ChlorobotRequest::_internal_set_command_type(::ChlorobotCommandEnum value) {
  if (!_internal_has_command_type()) {
    clear_data();
    set_has_command_type();
  }
  _impl_.data_.command_type_ = value;
}
inline void ChlorobotRequest::set_command_type(::ChlorobotCommandEnum value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:ChlorobotRequest.command_type)
}

inline bool ChlorobotRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void ChlorobotRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline ChlorobotRequest::DataCase ChlorobotRequest::data_case() const {
  return ChlorobotRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ChlorobotAuthentication

// optional string token = 1;
inline bool ChlorobotAuthentication::_internal_has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChlorobotAuthentication::has_token() const {
  return _internal_has_token();
}
inline void ChlorobotAuthentication::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChlorobotAuthentication::token() const {
  // @@protoc_insertion_point(field_get:ChlorobotAuthentication.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChlorobotAuthentication::set_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotAuthentication.token)
}
inline std::string* ChlorobotAuthentication::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ChlorobotAuthentication.token)
  return _s;
}
inline const std::string& ChlorobotAuthentication::_internal_token() const {
  return _impl_.token_.Get();
}
inline void ChlorobotAuthentication::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotAuthentication::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* ChlorobotAuthentication::release_token() {
  // @@protoc_insertion_point(field_release:ChlorobotAuthentication.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChlorobotAuthentication::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChlorobotAuthentication.token)
}

// optional uint32 version = 2;
inline bool ChlorobotAuthentication::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChlorobotAuthentication::has_version() const {
  return _internal_has_version();
}
inline void ChlorobotAuthentication::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChlorobotAuthentication::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t ChlorobotAuthentication::version() const {
  // @@protoc_insertion_point(field_get:ChlorobotAuthentication.version)
  return _internal_version();
}
inline void ChlorobotAuthentication::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}
inline void ChlorobotAuthentication::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:ChlorobotAuthentication.version)
}

// -------------------------------------------------------------------

// ChlorobotVersion

// uint32 major = 1;
inline void ChlorobotVersion::clear_major() {
  _impl_.major_ = 0u;
}
inline uint32_t ChlorobotVersion::_internal_major() const {
  return _impl_.major_;
}
inline uint32_t ChlorobotVersion::major() const {
  // @@protoc_insertion_point(field_get:ChlorobotVersion.major)
  return _internal_major();
}
inline void ChlorobotVersion::_internal_set_major(uint32_t value) {
  
  _impl_.major_ = value;
}
inline void ChlorobotVersion::set_major(uint32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:ChlorobotVersion.major)
}

// uint32 minor = 2;
inline void ChlorobotVersion::clear_minor() {
  _impl_.minor_ = 0u;
}
inline uint32_t ChlorobotVersion::_internal_minor() const {
  return _impl_.minor_;
}
inline uint32_t ChlorobotVersion::minor() const {
  // @@protoc_insertion_point(field_get:ChlorobotVersion.minor)
  return _internal_minor();
}
inline void ChlorobotVersion::_internal_set_minor(uint32_t value) {
  
  _impl_.minor_ = value;
}
inline void ChlorobotVersion::set_minor(uint32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:ChlorobotVersion.minor)
}

// uint32 patch = 3;
inline void ChlorobotVersion::clear_patch() {
  _impl_.patch_ = 0u;
}
inline uint32_t ChlorobotVersion::_internal_patch() const {
  return _impl_.patch_;
}
inline uint32_t ChlorobotVersion::patch() const {
  // @@protoc_insertion_point(field_get:ChlorobotVersion.patch)
  return _internal_patch();
}
inline void ChlorobotVersion::_internal_set_patch(uint32_t value) {
  
  _impl_.patch_ = value;
}
inline void ChlorobotVersion::set_patch(uint32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:ChlorobotVersion.patch)
}

// string pretty = 4;
inline void ChlorobotVersion::clear_pretty() {
  _impl_.pretty_.ClearToEmpty();
}
inline const std::string& ChlorobotVersion::pretty() const {
  // @@protoc_insertion_point(field_get:ChlorobotVersion.pretty)
  return _internal_pretty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChlorobotVersion::set_pretty(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pretty_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChlorobotVersion.pretty)
}
inline std::string* ChlorobotVersion::mutable_pretty() {
  std::string* _s = _internal_mutable_pretty();
  // @@protoc_insertion_point(field_mutable:ChlorobotVersion.pretty)
  return _s;
}
inline const std::string& ChlorobotVersion::_internal_pretty() const {
  return _impl_.pretty_.Get();
}
inline void ChlorobotVersion::_internal_set_pretty(const std::string& value) {
  
  _impl_.pretty_.Set(value, GetArenaForAllocation());
}
inline std::string* ChlorobotVersion::_internal_mutable_pretty() {
  
  return _impl_.pretty_.Mutable(GetArenaForAllocation());
}
inline std::string* ChlorobotVersion::release_pretty() {
  // @@protoc_insertion_point(field_release:ChlorobotVersion.pretty)
  return _impl_.pretty_.Release();
}
inline void ChlorobotVersion::set_allocated_pretty(std::string* pretty) {
  if (pretty != nullptr) {
    
  } else {
    
  }
  _impl_.pretty_.SetAllocated(pretty, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pretty_.IsDefault()) {
    _impl_.pretty_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChlorobotVersion.pretty)
}

// -------------------------------------------------------------------

// ChlorobotAcknowledgement

// optional .ChlorobotVersion version = 1;
inline bool ChlorobotAcknowledgement::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline bool ChlorobotAcknowledgement::has_version() const {
  return _internal_has_version();
}
inline void ChlorobotAcknowledgement::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ChlorobotVersion& ChlorobotAcknowledgement::_internal_version() const {
  const ::ChlorobotVersion* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChlorobotVersion&>(
      ::_ChlorobotVersion_default_instance_);
}
inline const ::ChlorobotVersion& ChlorobotAcknowledgement::version() const {
  // @@protoc_insertion_point(field_get:ChlorobotAcknowledgement.version)
  return _internal_version();
}
inline void ChlorobotAcknowledgement::unsafe_arena_set_allocated_version(
    ::ChlorobotVersion* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ChlorobotAcknowledgement.version)
}
inline ::ChlorobotVersion* ChlorobotAcknowledgement::release_version() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ChlorobotVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChlorobotVersion* ChlorobotAcknowledgement::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:ChlorobotAcknowledgement.version)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ChlorobotVersion* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::ChlorobotVersion* ChlorobotAcknowledgement::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChlorobotVersion>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::ChlorobotVersion* ChlorobotAcknowledgement::mutable_version() {
  ::ChlorobotVersion* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ChlorobotAcknowledgement.version)
  return _msg;
}
inline void ChlorobotAcknowledgement::set_allocated_version(::ChlorobotVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:ChlorobotAcknowledgement.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ChlorobotCommandEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChlorobotCommandEnum>() {
  return ::ChlorobotCommandEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chlorobot_5frpc_2eproto
