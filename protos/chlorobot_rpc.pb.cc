// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chlorobot_rpc.proto

#include "chlorobot_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ChlorobotPacket::ChlorobotPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parameters_)*/{}
  , /*decltype(_impl_.prefix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trailing_parameter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChlorobotPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChlorobotPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChlorobotPacketDefaultTypeInternal() {}
  union {
    ChlorobotPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChlorobotPacketDefaultTypeInternal _ChlorobotPacket_default_instance_;
PROTOBUF_CONSTEXPR ChlorobotAuthentication::ChlorobotAuthentication(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ChlorobotAuthenticationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChlorobotAuthenticationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChlorobotAuthenticationDefaultTypeInternal() {}
  union {
    ChlorobotAuthentication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChlorobotAuthenticationDefaultTypeInternal _ChlorobotAuthentication_default_instance_;
PROTOBUF_CONSTEXPR ChlorobotRequest::ChlorobotRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.auth_)*/nullptr
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChlorobotRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChlorobotRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChlorobotRequestDefaultTypeInternal() {}
  union {
    ChlorobotRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChlorobotRequestDefaultTypeInternal _ChlorobotRequest_default_instance_;
PROTOBUF_CONSTEXPR ChlorobotVersion::ChlorobotVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pretty_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.major_)*/0u
  , /*decltype(_impl_.minor_)*/0u
  , /*decltype(_impl_.patch_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChlorobotVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChlorobotVersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChlorobotVersionDefaultTypeInternal() {}
  union {
    ChlorobotVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChlorobotVersionDefaultTypeInternal _ChlorobotVersion_default_instance_;
PROTOBUF_CONSTEXPR ChlorobotAcknowledgement::ChlorobotAcknowledgement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/nullptr} {}
struct ChlorobotAcknowledgementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChlorobotAcknowledgementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChlorobotAcknowledgementDefaultTypeInternal() {}
  union {
    ChlorobotAcknowledgement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChlorobotAcknowledgementDefaultTypeInternal _ChlorobotAcknowledgement_default_instance_;
static ::_pb::Metadata file_level_metadata_chlorobot_5frpc_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chlorobot_5frpc_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chlorobot_5frpc_2eproto = nullptr;

const uint32_t TableStruct_chlorobot_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _impl_.prefix_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _impl_.trailing_parameter_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotPacket, _impl_.command_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::ChlorobotAuthentication, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotAuthentication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChlorobotAuthentication, _impl_.token_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChlorobotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ChlorobotRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChlorobotRequest, _impl_.auth_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ChlorobotRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChlorobotVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChlorobotVersion, _impl_.major_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotVersion, _impl_.minor_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotVersion, _impl_.patch_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotVersion, _impl_.pretty_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotAcknowledgement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ChlorobotAcknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChlorobotAcknowledgement, _impl_.version_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::ChlorobotPacket)},
  { 17, 24, -1, sizeof(::ChlorobotAuthentication)},
  { 25, -1, -1, sizeof(::ChlorobotRequest)},
  { 35, -1, -1, sizeof(::ChlorobotVersion)},
  { 45, 52, -1, sizeof(::ChlorobotAcknowledgement)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_ChlorobotPacket_default_instance_._instance,
  &::_ChlorobotAuthentication_default_instance_._instance,
  &::_ChlorobotRequest_default_instance_._instance,
  &::_ChlorobotVersion_default_instance_._instance,
  &::_ChlorobotAcknowledgement_default_instance_._instance,
};

const char descriptor_table_protodef_chlorobot_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023chlorobot_rpc.proto\"\262\001\n\017ChlorobotPacke"
  "t\022\023\n\006prefix\030\001 \001(\tH\001\210\001\001\022\025\n\013non_numeric\030\002 "
  "\001(\tH\000\022\021\n\007numeric\030\003 \001(\rH\000\022\022\n\nparameters\030\004"
  " \003(\t\022\037\n\022trailing_parameter\030\005 \001(\tH\002\210\001\001B\t\n"
  "\007commandB\t\n\007_prefixB\025\n\023_trailing_paramet"
  "er\"7\n\027ChlorobotAuthentication\022\022\n\005token\030\001"
  " \001(\tH\000\210\001\001B\010\n\006_token\"\225\001\n\020ChlorobotRequest"
  "\022&\n\004auth\030\001 \001(\0132\030.ChlorobotAuthentication"
  "\022\"\n\006packet\030\002 \001(\0132\020.ChlorobotPacketH\000\022-\n\014"
  "command_type\030\003 \001(\0162\025.ChlorobotCommandEnu"
  "mH\000B\006\n\004data\"O\n\020ChlorobotVersion\022\r\n\005major"
  "\030\001 \001(\r\022\r\n\005minor\030\002 \001(\r\022\r\n\005patch\030\003 \001(\r\022\016\n\006"
  "pretty\030\004 \001(\t\"O\n\030ChlorobotAcknowledgement"
  "\022\'\n\007version\030\001 \001(\0132\021.ChlorobotVersionH\000\210\001"
  "\001B\n\n\010_version*:\n\024ChlorobotCommandEnum\022\020\n"
  "\014SEND_NOTHING\020\000\022\020\n\014SEND_VERSION\020\0012\200\001\n\014Ch"
  "lorobotRPC\0228\n\006Listen\022\030.ChlorobotAuthenti"
  "cation\032\020.ChlorobotPacket\"\0000\001\0226\n\004Send\022\021.C"
  "hlorobotRequest\032\031.ChlorobotAcknowledgeme"
  "nt\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chlorobot_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chlorobot_5frpc_2eproto = {
    false, false, 772, descriptor_table_protodef_chlorobot_5frpc_2eproto,
    "chlorobot_rpc.proto",
    &descriptor_table_chlorobot_5frpc_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_chlorobot_5frpc_2eproto::offsets,
    file_level_metadata_chlorobot_5frpc_2eproto, file_level_enum_descriptors_chlorobot_5frpc_2eproto,
    file_level_service_descriptors_chlorobot_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chlorobot_5frpc_2eproto_getter() {
  return &descriptor_table_chlorobot_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chlorobot_5frpc_2eproto(&descriptor_table_chlorobot_5frpc_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChlorobotCommandEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chlorobot_5frpc_2eproto);
  return file_level_enum_descriptors_chlorobot_5frpc_2eproto[0];
}
bool ChlorobotCommandEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ChlorobotPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ChlorobotPacket>()._impl_._has_bits_);
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trailing_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChlorobotPacket::ChlorobotPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChlorobotPacket)
}
ChlorobotPacket::ChlorobotPacket(const ChlorobotPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChlorobotPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameters_){from._impl_.parameters_}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.trailing_parameter_){}
    , decltype(_impl_.command_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix()) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trailing_parameter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trailing_parameter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trailing_parameter()) {
    _this->_impl_.trailing_parameter_.Set(from._internal_trailing_parameter(), 
      _this->GetArenaForAllocation());
  }
  clear_has_command();
  switch (from.command_case()) {
    case kNonNumeric: {
      _this->_internal_set_non_numeric(from._internal_non_numeric());
      break;
    }
    case kNumeric: {
      _this->_internal_set_numeric(from._internal_numeric());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ChlorobotPacket)
}

inline void ChlorobotPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parameters_){arena}
    , decltype(_impl_.prefix_){}
    , decltype(_impl_.trailing_parameter_){}
    , decltype(_impl_.command_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trailing_parameter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trailing_parameter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_command();
}

ChlorobotPacket::~ChlorobotPacket() {
  // @@protoc_insertion_point(destructor:ChlorobotPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChlorobotPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.~RepeatedPtrField();
  _impl_.prefix_.Destroy();
  _impl_.trailing_parameter_.Destroy();
  if (has_command()) {
    clear_command();
  }
}

void ChlorobotPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChlorobotPacket::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:ChlorobotPacket)
  switch (command_case()) {
    case kNonNumeric: {
      _impl_.command_.non_numeric_.Destroy();
      break;
    }
    case kNumeric: {
      // No need to clear
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMAND_NOT_SET;
}


void ChlorobotPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ChlorobotPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.trailing_parameter_.ClearNonDefaultToEmpty();
    }
  }
  clear_command();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChlorobotPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChlorobotPacket.prefix"));
        } else
          goto handle_unusual;
        continue;
      // string non_numeric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_non_numeric();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChlorobotPacket.non_numeric"));
        } else
          goto handle_unusual;
        continue;
      // uint32 numeric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_numeric(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parameters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ChlorobotPacket.parameters"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string trailing_parameter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trailing_parameter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChlorobotPacket.trailing_parameter"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChlorobotPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChlorobotPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string prefix = 1;
  if (_internal_has_prefix()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChlorobotPacket.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // string non_numeric = 2;
  if (_internal_has_non_numeric()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_non_numeric().data(), static_cast<int>(this->_internal_non_numeric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChlorobotPacket.non_numeric");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_non_numeric(), target);
  }

  // uint32 numeric = 3;
  if (_internal_has_numeric()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_numeric(), target);
  }

  // repeated string parameters = 4;
  for (int i = 0, n = this->_internal_parameters_size(); i < n; i++) {
    const auto& s = this->_internal_parameters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChlorobotPacket.parameters");
    target = stream->WriteString(4, s, target);
  }

  // optional string trailing_parameter = 5;
  if (_internal_has_trailing_parameter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trailing_parameter().data(), static_cast<int>(this->_internal_trailing_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChlorobotPacket.trailing_parameter");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trailing_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChlorobotPacket)
  return target;
}

size_t ChlorobotPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChlorobotPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.parameters_.size());
  for (int i = 0, n = _impl_.parameters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.parameters_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
    }

    // optional string trailing_parameter = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trailing_parameter());
    }

  }
  switch (command_case()) {
    // string non_numeric = 2;
    case kNonNumeric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_non_numeric());
      break;
    }
    // uint32 numeric = 3;
    case kNumeric: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numeric());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChlorobotPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChlorobotPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChlorobotPacket::GetClassData() const { return &_class_data_; }


void ChlorobotPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChlorobotPacket*>(&to_msg);
  auto& from = static_cast<const ChlorobotPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChlorobotPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prefix(from._internal_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_trailing_parameter(from._internal_trailing_parameter());
    }
  }
  switch (from.command_case()) {
    case kNonNumeric: {
      _this->_internal_set_non_numeric(from._internal_non_numeric());
      break;
    }
    case kNumeric: {
      _this->_internal_set_numeric(from._internal_numeric());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChlorobotPacket::CopyFrom(const ChlorobotPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChlorobotPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChlorobotPacket::IsInitialized() const {
  return true;
}

void ChlorobotPacket::InternalSwap(ChlorobotPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_, lhs_arena,
      &other->_impl_.prefix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trailing_parameter_, lhs_arena,
      &other->_impl_.trailing_parameter_, rhs_arena
  );
  swap(_impl_.command_, other->_impl_.command_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChlorobotPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chlorobot_5frpc_2eproto_getter, &descriptor_table_chlorobot_5frpc_2eproto_once,
      file_level_metadata_chlorobot_5frpc_2eproto[0]);
}

// ===================================================================

class ChlorobotAuthentication::_Internal {
 public:
  using HasBits = decltype(std::declval<ChlorobotAuthentication>()._impl_._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChlorobotAuthentication::ChlorobotAuthentication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChlorobotAuthentication)
}
ChlorobotAuthentication::ChlorobotAuthentication(const ChlorobotAuthentication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChlorobotAuthentication* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChlorobotAuthentication)
}

inline void ChlorobotAuthentication::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChlorobotAuthentication::~ChlorobotAuthentication() {
  // @@protoc_insertion_point(destructor:ChlorobotAuthentication)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChlorobotAuthentication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void ChlorobotAuthentication::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChlorobotAuthentication::Clear() {
// @@protoc_insertion_point(message_clear_start:ChlorobotAuthentication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChlorobotAuthentication::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChlorobotAuthentication.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChlorobotAuthentication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChlorobotAuthentication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string token = 1;
  if (_internal_has_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChlorobotAuthentication.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChlorobotAuthentication)
  return target;
}

size_t ChlorobotAuthentication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChlorobotAuthentication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string token = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChlorobotAuthentication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChlorobotAuthentication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChlorobotAuthentication::GetClassData() const { return &_class_data_; }


void ChlorobotAuthentication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChlorobotAuthentication*>(&to_msg);
  auto& from = static_cast<const ChlorobotAuthentication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChlorobotAuthentication)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChlorobotAuthentication::CopyFrom(const ChlorobotAuthentication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChlorobotAuthentication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChlorobotAuthentication::IsInitialized() const {
  return true;
}

void ChlorobotAuthentication::InternalSwap(ChlorobotAuthentication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChlorobotAuthentication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chlorobot_5frpc_2eproto_getter, &descriptor_table_chlorobot_5frpc_2eproto_once,
      file_level_metadata_chlorobot_5frpc_2eproto[1]);
}

// ===================================================================

class ChlorobotRequest::_Internal {
 public:
  static const ::ChlorobotAuthentication& auth(const ChlorobotRequest* msg);
  static const ::ChlorobotPacket& packet(const ChlorobotRequest* msg);
};

const ::ChlorobotAuthentication&
ChlorobotRequest::_Internal::auth(const ChlorobotRequest* msg) {
  return *msg->_impl_.auth_;
}
const ::ChlorobotPacket&
ChlorobotRequest::_Internal::packet(const ChlorobotRequest* msg) {
  return *msg->_impl_.data_.packet_;
}
void ChlorobotRequest::set_allocated_packet(::ChlorobotPacket* packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet);
    if (message_arena != submessage_arena) {
      packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet, submessage_arena);
    }
    set_has_packet();
    _impl_.data_.packet_ = packet;
  }
  // @@protoc_insertion_point(field_set_allocated:ChlorobotRequest.packet)
}
ChlorobotRequest::ChlorobotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChlorobotRequest)
}
ChlorobotRequest::ChlorobotRequest(const ChlorobotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChlorobotRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.auth_){nullptr}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_auth()) {
    _this->_impl_.auth_ = new ::ChlorobotAuthentication(*from._impl_.auth_);
  }
  clear_has_data();
  switch (from.data_case()) {
    case kPacket: {
      _this->_internal_mutable_packet()->::ChlorobotPacket::MergeFrom(
          from._internal_packet());
      break;
    }
    case kCommandType: {
      _this->_internal_set_command_type(from._internal_command_type());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ChlorobotRequest)
}

inline void ChlorobotRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.auth_){nullptr}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

ChlorobotRequest::~ChlorobotRequest() {
  // @@protoc_insertion_point(destructor:ChlorobotRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChlorobotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.auth_;
  if (has_data()) {
    clear_data();
  }
}

void ChlorobotRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChlorobotRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:ChlorobotRequest)
  switch (data_case()) {
    case kPacket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.packet_;
      }
      break;
    }
    case kCommandType: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void ChlorobotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChlorobotRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.auth_ != nullptr) {
    delete _impl_.auth_;
  }
  _impl_.auth_ = nullptr;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChlorobotRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChlorobotAuthentication auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChlorobotPacket packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChlorobotCommandEnum command_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command_type(static_cast<::ChlorobotCommandEnum>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChlorobotRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChlorobotRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChlorobotAuthentication auth = 1;
  if (this->_internal_has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::auth(this),
        _Internal::auth(this).GetCachedSize(), target, stream);
  }

  // .ChlorobotPacket packet = 2;
  if (_internal_has_packet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::packet(this),
        _Internal::packet(this).GetCachedSize(), target, stream);
  }

  // .ChlorobotCommandEnum command_type = 3;
  if (_internal_has_command_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_command_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChlorobotRequest)
  return target;
}

size_t ChlorobotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChlorobotRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChlorobotAuthentication auth = 1;
  if (this->_internal_has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auth_);
  }

  switch (data_case()) {
    // .ChlorobotPacket packet = 2;
    case kPacket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.packet_);
      break;
    }
    // .ChlorobotCommandEnum command_type = 3;
    case kCommandType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_command_type());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChlorobotRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChlorobotRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChlorobotRequest::GetClassData() const { return &_class_data_; }


void ChlorobotRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChlorobotRequest*>(&to_msg);
  auto& from = static_cast<const ChlorobotRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChlorobotRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_auth()) {
    _this->_internal_mutable_auth()->::ChlorobotAuthentication::MergeFrom(
        from._internal_auth());
  }
  switch (from.data_case()) {
    case kPacket: {
      _this->_internal_mutable_packet()->::ChlorobotPacket::MergeFrom(
          from._internal_packet());
      break;
    }
    case kCommandType: {
      _this->_internal_set_command_type(from._internal_command_type());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChlorobotRequest::CopyFrom(const ChlorobotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChlorobotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChlorobotRequest::IsInitialized() const {
  return true;
}

void ChlorobotRequest::InternalSwap(ChlorobotRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.auth_, other->_impl_.auth_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChlorobotRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chlorobot_5frpc_2eproto_getter, &descriptor_table_chlorobot_5frpc_2eproto_once,
      file_level_metadata_chlorobot_5frpc_2eproto[2]);
}

// ===================================================================

class ChlorobotVersion::_Internal {
 public:
};

ChlorobotVersion::ChlorobotVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChlorobotVersion)
}
ChlorobotVersion::ChlorobotVersion(const ChlorobotVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChlorobotVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pretty_){}
    , decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.patch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pretty_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pretty_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pretty().empty()) {
    _this->_impl_.pretty_.Set(from._internal_pretty(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.patch_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  // @@protoc_insertion_point(copy_constructor:ChlorobotVersion)
}

inline void ChlorobotVersion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pretty_){}
    , decltype(_impl_.major_){0u}
    , decltype(_impl_.minor_){0u}
    , decltype(_impl_.patch_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pretty_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pretty_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChlorobotVersion::~ChlorobotVersion() {
  // @@protoc_insertion_point(destructor:ChlorobotVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChlorobotVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pretty_.Destroy();
}

void ChlorobotVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChlorobotVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:ChlorobotVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pretty_.ClearToEmpty();
  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.patch_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChlorobotVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pretty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pretty();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChlorobotVersion.pretty"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChlorobotVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChlorobotVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  // string pretty = 4;
  if (!this->_internal_pretty().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pretty().data(), static_cast<int>(this->_internal_pretty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChlorobotVersion.pretty");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pretty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChlorobotVersion)
  return target;
}

size_t ChlorobotVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChlorobotVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pretty = 4;
  if (!this->_internal_pretty().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pretty());
  }

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChlorobotVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChlorobotVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChlorobotVersion::GetClassData() const { return &_class_data_; }


void ChlorobotVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChlorobotVersion*>(&to_msg);
  auto& from = static_cast<const ChlorobotVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChlorobotVersion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pretty().empty()) {
    _this->_internal_set_pretty(from._internal_pretty());
  }
  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _this->_internal_set_patch(from._internal_patch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChlorobotVersion::CopyFrom(const ChlorobotVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChlorobotVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChlorobotVersion::IsInitialized() const {
  return true;
}

void ChlorobotVersion::InternalSwap(ChlorobotVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pretty_, lhs_arena,
      &other->_impl_.pretty_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChlorobotVersion, _impl_.patch_)
      + sizeof(ChlorobotVersion::_impl_.patch_)
      - PROTOBUF_FIELD_OFFSET(ChlorobotVersion, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChlorobotVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chlorobot_5frpc_2eproto_getter, &descriptor_table_chlorobot_5frpc_2eproto_once,
      file_level_metadata_chlorobot_5frpc_2eproto[3]);
}

// ===================================================================

class ChlorobotAcknowledgement::_Internal {
 public:
  using HasBits = decltype(std::declval<ChlorobotAcknowledgement>()._impl_._has_bits_);
  static const ::ChlorobotVersion& version(const ChlorobotAcknowledgement* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ChlorobotVersion&
ChlorobotAcknowledgement::_Internal::version(const ChlorobotAcknowledgement* msg) {
  return *msg->_impl_.version_;
}
ChlorobotAcknowledgement::ChlorobotAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChlorobotAcknowledgement)
}
ChlorobotAcknowledgement::ChlorobotAcknowledgement(const ChlorobotAcknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChlorobotAcknowledgement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::ChlorobotVersion(*from._impl_.version_);
  }
  // @@protoc_insertion_point(copy_constructor:ChlorobotAcknowledgement)
}

inline void ChlorobotAcknowledgement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){nullptr}
  };
}

ChlorobotAcknowledgement::~ChlorobotAcknowledgement() {
  // @@protoc_insertion_point(destructor:ChlorobotAcknowledgement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChlorobotAcknowledgement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.version_;
}

void ChlorobotAcknowledgement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChlorobotAcknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:ChlorobotAcknowledgement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.version_ != nullptr);
    _impl_.version_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChlorobotAcknowledgement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ChlorobotVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChlorobotAcknowledgement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChlorobotAcknowledgement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .ChlorobotVersion version = 1;
  if (_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChlorobotAcknowledgement)
  return target;
}

size_t ChlorobotAcknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChlorobotAcknowledgement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ChlorobotVersion version = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChlorobotAcknowledgement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChlorobotAcknowledgement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChlorobotAcknowledgement::GetClassData() const { return &_class_data_; }


void ChlorobotAcknowledgement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChlorobotAcknowledgement*>(&to_msg);
  auto& from = static_cast<const ChlorobotAcknowledgement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChlorobotAcknowledgement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::ChlorobotVersion::MergeFrom(
        from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChlorobotAcknowledgement::CopyFrom(const ChlorobotAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChlorobotAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChlorobotAcknowledgement::IsInitialized() const {
  return true;
}

void ChlorobotAcknowledgement::InternalSwap(ChlorobotAcknowledgement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChlorobotAcknowledgement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chlorobot_5frpc_2eproto_getter, &descriptor_table_chlorobot_5frpc_2eproto_once,
      file_level_metadata_chlorobot_5frpc_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChlorobotPacket*
Arena::CreateMaybeMessage< ::ChlorobotPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChlorobotPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ChlorobotAuthentication*
Arena::CreateMaybeMessage< ::ChlorobotAuthentication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChlorobotAuthentication >(arena);
}
template<> PROTOBUF_NOINLINE ::ChlorobotRequest*
Arena::CreateMaybeMessage< ::ChlorobotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChlorobotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChlorobotVersion*
Arena::CreateMaybeMessage< ::ChlorobotVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChlorobotVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::ChlorobotAcknowledgement*
Arena::CreateMaybeMessage< ::ChlorobotAcknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChlorobotAcknowledgement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
