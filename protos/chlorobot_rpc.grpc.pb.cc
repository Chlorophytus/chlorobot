// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chlorobot_rpc.proto

#include "chlorobot_rpc.pb.h"
#include "chlorobot_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* ChlorobotRPC_method_names[] = {
  "/ChlorobotRPC/Listen",
  "/ChlorobotRPC/Send",
};

std::unique_ptr< ChlorobotRPC::Stub> ChlorobotRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChlorobotRPC::Stub> stub(new ChlorobotRPC::Stub(channel, options));
  return stub;
}

ChlorobotRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Listen_(ChlorobotRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Send_(ChlorobotRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::ChlorobotPacket>* ChlorobotRPC::Stub::ListenRaw(::grpc::ClientContext* context, const ::ChlorobotAuthentication& request) {
  return ::grpc::internal::ClientReaderFactory< ::ChlorobotPacket>::Create(channel_.get(), rpcmethod_Listen_, context, request);
}

void ChlorobotRPC::Stub::async::Listen(::grpc::ClientContext* context, const ::ChlorobotAuthentication* request, ::grpc::ClientReadReactor< ::ChlorobotPacket>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ChlorobotPacket>::Create(stub_->channel_.get(), stub_->rpcmethod_Listen_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ChlorobotPacket>* ChlorobotRPC::Stub::AsyncListenRaw(::grpc::ClientContext* context, const ::ChlorobotAuthentication& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ChlorobotPacket>::Create(channel_.get(), cq, rpcmethod_Listen_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ChlorobotPacket>* ChlorobotRPC::Stub::PrepareAsyncListenRaw(::grpc::ClientContext* context, const ::ChlorobotAuthentication& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ChlorobotPacket>::Create(channel_.get(), cq, rpcmethod_Listen_, context, request, false, nullptr);
}

::grpc::Status ChlorobotRPC::Stub::Send(::grpc::ClientContext* context, const ::ChlorobotRequest& request, ::ChlorobotAcknowledgement* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ChlorobotRequest, ::ChlorobotAcknowledgement, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_, context, request, response);
}

void ChlorobotRPC::Stub::async::Send(::grpc::ClientContext* context, const ::ChlorobotRequest* request, ::ChlorobotAcknowledgement* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ChlorobotRequest, ::ChlorobotAcknowledgement, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

void ChlorobotRPC::Stub::async::Send(::grpc::ClientContext* context, const ::ChlorobotRequest* request, ::ChlorobotAcknowledgement* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ChlorobotAcknowledgement>* ChlorobotRPC::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::ChlorobotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ChlorobotAcknowledgement, ::ChlorobotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ChlorobotAcknowledgement>* ChlorobotRPC::Stub::AsyncSendRaw(::grpc::ClientContext* context, const ::ChlorobotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChlorobotRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChlorobotRPC_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChlorobotRPC::Service, ::ChlorobotAuthentication, ::ChlorobotPacket>(
          [](ChlorobotRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChlorobotAuthentication* req,
             ::grpc::ServerWriter<::ChlorobotPacket>* writer) {
               return service->Listen(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChlorobotRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChlorobotRPC::Service, ::ChlorobotRequest, ::ChlorobotAcknowledgement, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChlorobotRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ChlorobotRequest* req,
             ::ChlorobotAcknowledgement* resp) {
               return service->Send(ctx, req, resp);
             }, this)));
}

ChlorobotRPC::Service::~Service() {
}

::grpc::Status ChlorobotRPC::Service::Listen(::grpc::ServerContext* context, const ::ChlorobotAuthentication* request, ::grpc::ServerWriter< ::ChlorobotPacket>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChlorobotRPC::Service::Send(::grpc::ServerContext* context, const ::ChlorobotRequest* request, ::ChlorobotAcknowledgement* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


